openapi: 3.0.3
info:
  title: Alimento Solidário API
  version: 2.0.0
  description: API para um WEBService de doação de alimentos.
paths:
  /api/classifications/:
    get:
      operationId: classifications_list
      tags:
      - classifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Classification'
          description: ''
    post:
      operationId: classifications_create
      tags:
      - classifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Classification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Classification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: ''
  /api/classifications/{id}/:
    get:
      operationId: classifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - classifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: ''
    put:
      operationId: classifications_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - classifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Classification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Classification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: ''
    patch:
      operationId: classifications_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - classifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClassification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClassification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClassification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: ''
    delete:
      operationId: classifications_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - classifications
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/classifications/name/{name}/:
    get:
      operationId: classifications_name_retrieve
      parameters:
      - in: path
        name: name
        schema:
          type: string
        required: true
      tags:
      - classifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: ''
  /api/donations/:
    get:
      operationId: donations_list
      tags:
      - donations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'
          description: ''
    post:
      operationId: donations_create
      tags:
      - donations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Donation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Donation'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'
          description: ''
  /api/donations/{id}/:
    get:
      operationId: donations_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this donations.
        required: true
      tags:
      - donations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationDetail'
          description: ''
    put:
      operationId: donations_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this donations.
        required: true
      tags:
      - donations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DonationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DonationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationDetail'
          description: ''
    patch:
      operationId: donations_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this donations.
        required: true
      tags:
      - donations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDonationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDonationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDonationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationDetail'
          description: ''
    delete:
      operationId: donations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this donations.
        required: true
      tags:
      - donations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/donations/expand/:
    get:
      operationId: donations_expand_list
      tags:
      - donations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'
          description: ''
  /api/donations/expand/{id}/:
    get:
      operationId: donations_expand_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this donations.
        required: true
      tags:
      - donations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationExpandDetail'
          description: ''
  /api/donations/user/:
    get:
      operationId: donations_user_list
      tags:
      - donations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationUser'
          description: ''
  /api/login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/reservations/:
    get:
      operationId: reservations_retrieve
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: reservations_create
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/reservations/{id}/:
    get:
      operationId: reservations_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: reservations_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: reservations_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: reservations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/reservations/user/:
    get:
      operationId: reservations_user_retrieve
      tags:
      - reservations
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/profile/:
    get:
      operationId: users_profile_list
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/users/soft/{id}/:
    put:
      operationId: users_soft_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_soft_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        address:
          type: string
        complement:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
      required:
      - address
      - city
      - complement
      - id
      - state
      - zipCode
    Classification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
      required:
      - id
      - name
    CustomTokenObtainPair:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Donation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        food:
          type: string
          maxLength: 50
        quantity:
          type: string
          maxLength: 30
        expiration:
          type: string
          format: date
        available:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        classification:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - classification
      - createdAt
      - expiration
      - food
      - id
      - quantity
      - updatedAt
      - user
    DonationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        food:
          type: string
          maxLength: 50
        quantity:
          type: string
          maxLength: 30
        expiration:
          type: string
          format: date
        available:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        classification:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - classification
      - createdAt
      - expiration
      - food
      - id
      - quantity
      - updatedAt
    DonationExpandDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        food:
          type: string
          maxLength: 50
        quantity:
          type: string
          maxLength: 30
        expiration:
          type: string
          format: date
        available:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        classification:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - classification
      - createdAt
      - expiration
      - food
      - id
      - quantity
      - updatedAt
      - user
    DonationUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          maxLength: 100
        responsible:
          type: string
          maxLength: 100
        contact:
          type: string
          maxLength: 50
        type:
          $ref: '#/components/schemas/TypeEnum'
        isAdm:
          type: boolean
        isActive:
          type: boolean
        donations:
          type: array
          items:
            $ref: '#/components/schemas/Donation'
        address:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - address
      - contact
      - donations
      - email
      - id
      - name
      - responsible
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    PatchedClassification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
    PatchedDonationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        food:
          type: string
          maxLength: 50
        quantity:
          type: string
          maxLength: 30
        expiration:
          type: string
          format: date
        available:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        classification:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          maxLength: 100
        name:
          type: string
          maxLength: 100
        cnpj_cpf:
          type: string
        responsible:
          type: string
          maxLength: 100
        contact:
          type: string
          maxLength: 50
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          default: Not Informed
        isAdm:
          type: boolean
        isActive:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
    TypeEnum:
      enum:
      - donor
      - charity
      - Not Informed
      type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          maxLength: 100
        name:
          type: string
          maxLength: 100
        cnpj_cpf:
          type: string
        responsible:
          type: string
          maxLength: 100
        contact:
          type: string
          maxLength: 50
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          default: Not Informed
        isAdm:
          type: boolean
        isActive:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
      required:
      - address
      - cnpj_cpf
      - contact
      - email
      - id
      - name
      - password
      - responsible
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
